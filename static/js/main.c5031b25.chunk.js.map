{"version":3,"sources":["components/Card/card.component.jsx","components/Cardlist/cardlist.component.jsx","components/SearchBox/searchbox.component.jsx","components/ErrorBoundary/errorBoundary.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","width","name","email","CardList","robots","cardsArray","map","user","i","key","SearchBox","type","placeholder","onChange","searchChange","ErrorBoundary","state","hasError","error","info","this","setState","children","React","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","searchbar","document","querySelector","cardlist","style","top","offsetTop","searchStart","window","onscroll","scrollTop","pageYOffset","documentElement","body","parentNode","pos","onresize","filteredRobots","filter","robot","toLowerCase","includes","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gVAeeA,MAZf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,GAAhC,YAA8CC,MAAM,UACxE,6BACI,4BAAKL,EAAMM,MACX,2BAAIN,EAAMO,UCQXC,G,MAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEVC,EAAaD,EAAOE,KAAK,SAACC,EAAMC,GAClC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIE,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAElF,OACI,yBAAKN,UAAU,aACVS,KCAEK,G,MARG,SAACf,GACf,OACI,yBAAKC,UAAU,cACX,2BAAOA,UAAU,eAAee,KAAK,SAASC,YAAY,gBAAgBC,SAAUlB,EAAMmB,kBCiBvFC,E,kDApBX,WAAYpB,GAAO,IAAD,8BACd,cAAMA,IACDqB,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,iEAGAG,KAAKzB,MAAM2B,a,GAlBFC,IAAMC,WCkEnBC,E,kDA1Db,aAAc,IAAD,8BACX,gBAmCFC,eAAiB,SAACC,GAChB,EAAKN,SAAS,CAAEO,YAAaD,EAAME,OAAOC,SAnC1C,EAAKd,MAAQ,CACXZ,OAAQ,GACRwB,YAAa,IAJJ,E,gEAQQ,IAAD,OAClBG,MAAM,8CAA8CC,MAAM,SAAAC,GACxD,OAAOA,EAASC,UACfF,MAAM,SAAAG,GACP,EAAKd,SAAS,CAAEjB,OAAQ+B,OAI1B,IAAIC,EAAYC,SAASC,cAAc,eACnCC,EAAWF,SAASC,cAAc,cACtCF,EAAUI,MAAMC,IAAhB,UAAyBF,EAASG,UAAlC,MACA,IAAIC,EAAcP,EAAUM,UAE5BE,OAAOC,SAAW,WAChB,IAAIC,EAAYF,OAAOG,cAAgBV,SAASW,iBAAmBX,SAASY,KAAKC,YAAcb,SAASY,MAAMH,UAC1GK,EAAMR,EAAcG,EACrBK,EAAI,IACLA,EAAI,GACNf,EAAUI,MAAMC,IAAhB,UAAyBU,EAAzB,OAGFP,OAAOQ,SAAW,WAChBT,EAAcJ,EAASG,UACpBN,EAAUM,YACXN,EAAUI,MAAMC,IAAhB,UAAyBF,EAASG,UAAlC,U,+BAQI,IAAD,OAEDW,EAAiBjC,KAAKJ,MAAMZ,OAAOkD,QAAQ,SAAAC,GAC/C,OAAOA,EAAMtD,KAAKuD,cAAcC,SAAS,EAAKzC,MAAMY,YAAY4B,kBAGlE,OACE,yBAAK5D,UAAU,OACb,wBAAIG,GAAG,eAAP,eACA,kBAAC,EAAD,CAAWe,aAAcM,KAAKM,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUtB,OAAQiD,U,GArDV9B,IAAMC,WCIJkC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAMuD,c","file":"static/js/main.c5031b25.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nfunction Card(props) {\r\n    return(\r\n        <div className='card'>\r\n            <img alt='robot' src={`https://robohash.org/${props.id}?200x200`} width=\"200px\"></img>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/card.component';\r\n\r\nimport './cardlist.styles.css';\r\n\r\nconst CardList = ( {robots} ) => {\r\n\r\n    const cardsArray = robots.map( (user, i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n    })\r\n    return(\r\n        <div className=\"card-list\">\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nimport './searchbox.styles.css';\r\n\r\nconst SearchBox = (props) => {\r\n    return(\r\n        <div className=\"search-box\">\r\n            <input className=\"search-input\" type=\"search\" placeholder=\"Search Robots\" onChange={props.searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>OOPS! Robots encountered an error</h1>\r\n        }\r\n        else\r\n            return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\nimport './App.css';\nimport CardList from './components/Cardlist/cardlist.component';\nimport SearchBox from './components/SearchBox/searchbox.component';\nimport ErrorBoundary from './components/ErrorBoundary/errorBoundary.component';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      robots: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then( response => {\n      return response.json();\n    }).then( users => {\n      this.setState({ robots: users })\n    });\n\n\n    var searchbar = document.querySelector('.search-box');\n    var cardlist = document.querySelector('.card-list');\n    searchbar.style.top = `${cardlist.offsetTop}px`;\n    var searchStart = searchbar.offsetTop;\n\n    window.onscroll = function() {\n      var scrollTop = window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop\n      var pos = searchStart - scrollTop;\n      if(pos<0)\n        pos=0;\n      searchbar.style.top = `${pos}px`;\n    };\n\n    window.onresize = function() {\n      searchStart = cardlist.offsetTop;\n      if(searchbar.offsetTop)\n        searchbar.style.top = `${cardlist.offsetTop}px`;\n    };\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  }\n\n  render() {\n\n    const filteredRobots = this.state.robots.filter( robot => {\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    })\n\n    return (\n      <div className=\"App\">\n        <h1 id=\"page-header\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}